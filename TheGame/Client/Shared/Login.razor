@page "/login"
@inject IAuthService AuthService;
@inject NavigationManager NavigationService;
@inject ILocalStorageService StorageService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IToastService ToastService;

<div class="m-auto">
    <div class="container">
        <div class="row align-items-center justify-content-center" style="margin-top:15vh">

            <EditForm Model="login" OnValidSubmit="SubmitLogin">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div style="width:350px">
                    <div class="form-row">
                        <span for="email" class="form-text pb-1">Email</span>
                        <InputText id="email" class="form-control rounded-pill" @bind-Value="login.Email"></InputText>
                        <ValidationMessage For="(() => login.Email)"></ValidationMessage>
                    </div>

                    <div class="form-row mt-2">
                        <span for="password" class="form-text pb-1">Password</span>
                        <InputText id="password" class="form-control rounded-pill" type="password" @bind-Value="login.Password"></InputText>
                        <ValidationMessage For="(() => login.Password)"></ValidationMessage>
                    </div>
                </div>
                @switch (SubmitButton.Status)
                {
                    case FormButtonStatus.ButtonStatus.Idle:
                        <button type="submit" class="btn btn-primary rounded-pill mt-4 py-3 w-100">Login</button>

                        break;
                    case FormButtonStatus.ButtonStatus.Loading:
                        <span class="disabled btn btn-primary rounded-pill mt-4 py-3 w-100">Login...</span>
                        break;
                    case FormButtonStatus.ButtonStatus.Success:
                        <button class="btn btn-success rounded-pill mt-4 py-3 w-100" @onclick="NavigateToHomePage">Successfully Logined</button>
                        break;
                    case FormButtonStatus.ButtonStatus.Error:
                        <button type="submit" class="btn btn-primary rounded-pill mt-4 py-3 w-100">Login</button>
                        <span class="d-block mt-2 text-danger text-center text-wrap">@SubmitButton.Message</span>
                        break;
                    default:
                        break;
                }
            </EditForm>

        </div>
    </div>
</div>

@code {
    public LoginData login = new LoginData();

    public FormButtonStatus SubmitButton = new FormButtonStatus();


    public async Task SubmitLogin()
    {
        SubmitButton.Status = FormButtonStatus.ButtonStatus.Loading;

        var response = await AuthService.Login(login);

        if (response.IsSuccess)
        {
            await StorageService.SetItemAsStringAsync("token", response.Data);
            SubmitButton.Status = FormButtonStatus.ButtonStatus.Success;
            ToastService.ShowSuccess("Successfully Logined!!");
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigateToHomePage();
        }
        else
        {
            SubmitButton.Status = FormButtonStatus.ButtonStatus.Error;
            SubmitButton.Message = response.Message;
        }
    }

    public void NavigateToHomePage()
    {
        NavigationService.NavigateTo("/");
    }
}
