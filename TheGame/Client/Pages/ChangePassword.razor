@page "/changePassword"
@inject IAcountService AcountService;
@inject NavigationManager NavigationService;
@inject IToastService ToastService;
@inject IAuthService AuthService;
@attribute [Authorize]
    <div class="m-auto">
        <div class="container">
            <div class="row align-items-center justify-content-center" style="margin-top:10vh">

                <EditForm Model="password" OnValidSubmit="HandleChangingPassword">
                    <DataAnnotationsValidator></DataAnnotationsValidator>
                    <div style="width:350px">

                        <!-- Current Password -->
                        <div class="form-row">
                            <span for="password" class="form-text pb-1">Current Password</span>
                            <InputText @bind-Value="password.CurrentPassword" id="password" type="password" class="form-control rounded-pill" />
                            <ValidationMessage For="@(() => password.CurrentPassword)" />
                        </div>


                        <!-- New Password -->
                        <div class="form-row mt-2">
                            <span for="newPassword" class="form-text pb-1">New Password</span>
                            <InputText @bind-Value="password.NewPassword" id="newPassword" type="password" class="form-control rounded-pill" />
                            <ValidationMessage For="@(() => password.NewPassword)" />
                        </div>


                        <!-- Confirm New Password -->
                        <div class="form-row mt-2">
                            <span for="confirmNewPassword" class="form-text pb-1">Confirm New Password</span>
                            <InputText @bind-Value="password.ConfirmNewPassword" id="confirmNewPassword" type="password" class="form-control rounded-pill" />
                            <ValidationMessage For="@(() => password.ConfirmNewPassword)" />
                        </div>
                    </div>

                    @switch (SubmitButton.Status)
                    {
                        case FormButtonStatus.ButtonStatus.Idle:
                            <button type="submit" class="btn btn-outline-warning rounded-pill mt-4 py-3 w-100">Change Password</button>
                            break;
                        case FormButtonStatus.ButtonStatus.Loading:
                            <span class="disabled btn btn-outline-warning rounded-pill mt-4 py-3 w-100">Changing</span>
                            break;
                        case FormButtonStatus.ButtonStatus.Success:
                            <button class="btn btn-success rounded-pill mt-4 py-3 w-100">Successfully Changed</button>
                            break;
                        case FormButtonStatus.ButtonStatus.Error:
                            <button type="submit" class="btn btn-outline-warning rounded-pill mt-4 py-3 w-100">Change Password</button>
                            <span class="d-block mt-2 text-danger text-center text-wrap">@SubmitButton.Message</span>
                            break;
                        default:
                            break;
                    }
                </EditForm>

            </div>
        </div>
    </div>

    @code {

        public ChangePasswordData password = new ChangePasswordData();

        public FormButtonStatus SubmitButton = new FormButtonStatus();

        async Task HandleChangingPassword()
        {
            SubmitButton.Status = FormButtonStatus.ButtonStatus.Loading;

            var response = await AcountService.ChangePassword(password);

            if (response.IsSuccess)
            {
                SubmitButton.Status = FormButtonStatus.ButtonStatus.Success;
                ToastService.ShowSuccess(response.Data);
                await AuthService.Logout();
                ToastService.ShowInfo("Please login again!");
            }
            else
            {
                SubmitButton.Status = FormButtonStatus.ButtonStatus.Error;
                SubmitButton.Message = response.Message;
            }
        }
    }
