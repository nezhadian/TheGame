@page "/battle"
@inject IBattleInfoService BattleInfoService
@inject IAttackService AttackService
@inject IUserUnitService UserUnitService
@inject IToastService ToastService;
@attribute [Authorize]

<style>
    :root {
        --attack: #00ff0099;
        --defence: #ff000099;
    }

    .arrow-attack {
        float: left;
        position: relative;
        background-color: var(--attack);
        height: 2rem;
        width: 60%;
        color: #555;
        animation: arrow-attack-anim 2s linear infinite;
    }

        .arrow-attack:after {
            content: '';
            position: absolute;
            width: 3rem;
            height: 2rem;
            top: 0;
            right: -3rem;
            border-top: 1rem solid transparent;
            border-bottom: 1rem solid transparent;
            border-left: 1rem solid var(--attack);
        }

    @@keyframes arrow-attack-anim {
        100% {
            margin-left: 2rem;
        }
    }


    .arrow-defence {
        float: right;
        position: relative;
        background-color: var(--defence);
        height: 2rem;
        width: 60%;
        color: #555;
        align-self: flex-end;
        animation: arrow-defence-anim 2s linear infinite;
    }

        .arrow-defence:before {
            content: '';
            position: absolute;
            width: 3rem;
            height: 2rem;
            top: 0;
            left: -3rem;
            border-top: 1rem solid transparent;
            border-bottom: 1rem solid transparent;
            border-right: 1rem solid var(--defence);
        }

    @@keyframes arrow-defence-anim {
        100% {
            margin-right: 2rem;
        }
    }

    .align-x-center {
        position:relative;
        text-align:center;
    }
        .align-x-center > img {
            width: 100%;
            height: auto;
        }
        .align-x-center > span {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }

</style>

@if (BattleInfoService.CurrentBattle != null)
{

    <div class="d-flex align-items-center justify-content-around mt-3">

        <!--Attacker-->
        <div class="d-flex flex-column align-items-center">

            <!--Avatar-->
            <div class="rounded-circle text-white text-center @(GetAvatarColor(BattleInfoService.CurrentBattle.IsAttackerWinner))" style="width:10rem;height:10rem"></div>

            <!--Username-->
            <h4 class="mt-3">@BattleInfoService.CurrentBattle.AttackerName</h4>

            <!--HP-->
            <div>
                @BattleInfoService.CurrentBattle.OpponentDamage
                <span class="text-muted font-italic">hp</span>
            </div>

            <!--Progress-->
            <div class="progress w-100">
                <div class="progress-bar bg-warning"
                     style="width:@(CalulatePercentage(BattleInfoService.CurrentBattle.AttackerDamage, BattleInfoService.CurrentBattle.AttackerHitpoint))%"></div>
            </div>

        </div>

        <!--Vs Text-->
        <h3 class="font-italic text-muted">VS</h3>

        <!--Opponent-->
        <div class="d-flex flex-column align-items-center">
            <!--Avatar-->
            <div class="rounded-circle text-white text-center @(GetAvatarColor(!BattleInfoService.CurrentBattle.IsAttackerWinner))" style="width:10rem;height:10rem"></div>

            <!--Username-->
            <h4 class="mt-3">@BattleInfoService.CurrentBattle.OpponentName</h4>

            <!--HP-->
            <div>
                @BattleInfoService.CurrentBattle.AttackerDamage
                <span class="text-muted font-italic">hp</span>
            </div>

            <!--Progress-->
            <div class="progress w-100">
                <div class="progress-bar bg-warning"
                     style="width:@(CalulatePercentage(BattleInfoService.CurrentBattle.OpponentDamage, BattleInfoService.CurrentBattle.OpponentHitpoint))%"></div>
            </div>
        </div>

    </div>

    <!--Rounds Count Text-->
    <h3 class="mt-4 text-center">Round @BattleInfoService.CurrentBattle.Rounds</h3>

    @if (!BattleInfoService.CurrentBattle.IsCompleted)
    {
        <div class="d-flex justify-content-center">
            <button class="btn btn-danger px-5 py-3 mt-2" @onclick="Attack">Attack</button>
        </div>
    }


    <!--Rounds -->
    <div>
        @foreach (AttackResault item in AttackService.Attacks)
        {


    <div class="row w-75 mx-auto my-1">
                <!--Attacker Avatar-->
        <div class="col-3">
                @if (item.IsDefence && item.IsDead)
                {
            <div class="align-x-center">
                <img src="@GetImagePath(item.AttackerUnitId)" />
                <span class="oi oi-x text-danger h3"></span>
            </div>
                }
                else
                {
                    <img class="w-100" src="@GetImagePath(item.AttackerUnitId)" />
                }
            </div>

            <!--Damage-->
            <div class="col-6">
                @if (item.IsDefence)
                {
                    <div class="w-100 h-100 d-flex flex-column justify-content-center">
                        <div class="arrow-defence">
                            <div class="py-1 w-100 text-center text-white">@item.Damage</div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="w-100 h-100 d-flex flex-column justify-content-center">
                        <div class="arrow-attack">
                            <div class="py-1 w-100 text-center text-white">@item.Damage</div>
                        </div>
                    </div>

                }
            </div>

            <!--Opponent Avatar-->
            <div class="col-3">
                @if (!item.IsDefence && item.IsDead)
                {
                    <div class="align-x-center">
                        <img src="@GetImagePath(item.OpponentUnitId)" />
                        <span class="oi oi-x text-danger h3"></span>
                    </div>
                }
                else
                {
                    <img class="w-100" src="@GetImagePath(item.OpponentUnitId)" />
                }
            </div>

        </div>
        }
    </div>

}
@code {

    private int _battleId;
    [Parameter]
    public int BattleId
    {
        get { return _battleId; }
        set {

            _battleId = value;
            BattleInfoService.GetBattleInfo(value);
            AttackService.GetLog(value);

        }
    }

    [Parameter]
    public EventCallback OnBattleCompleted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UserUnitService.GetUnitsAsync();
        AttackService.OnChanged += StateHasChanged;
        BattleInfoService.OnChanged += StateHasChanged;
    }

    public double CalulatePercentage(int value, int total)
    {
        return 100 - ((double)value / total) * 100;
    }

    public string GetImagePath(int unitId)
    {
        var unit = UserUnitService.Units.FirstOrDefault(u => u.Id == unitId);
        return $"images/{unit.Title}.jpeg";
    }

    public string GetAvatarColor(bool? opponentState)
    {
        switch (opponentState)
        {
            case true: return "bg-success";
            case false: return "bg-danger";
            case null: return "bg-null";
        }
    }

    public async Task Attack()
    {
        var isBattleCompleted = await AttackService.Attack();
        await BattleInfoService.ReloadCurrentBattle();
        if(isBattleCompleted)
        {
            if (BattleInfoService.CurrentBattle.YouWon == true)
            {
                ToastService.ShowSuccess("You Won!!!");
            }
            else
            {
                ToastService.ShowWarning("You Defeat~");

            }
            await OnBattleCompleted.InvokeAsync();
        }
    }
}
