@page "/register"
@inject IAuthService AuthService;
@inject NavigationManager NavigationService;

<div class="m-auto">
    <div class="container">
        <div class="row align-items-center justify-content-center" style="margin-top:10vh">

            <EditForm Model="register" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div style="width:350px">

                    <div class="form-row">
                        <span for="email" class="form-text pb-1">Email</span>
                        <InputText id="email" class="form-control rounded-pill" @bind-Value="register.Email"></InputText>
                        <ValidationMessage For="(() => register.Email)"></ValidationMessage>
                    </div>

                    <div class="form-row mt-2">
                        <span for="username" class="form-text pb-1">Username</span>
                        <InputText id="username" class="form-control rounded-pill" @bind-Value="register.Username"></InputText>
                        <ValidationMessage For="(() => register.Username)"></ValidationMessage>
                    </div>

                    <div class="form-row mt-2">
                        <span for="password" class="form-text pb-1">Password</span>
                        <InputText id="password" class="form-control rounded-pill" type="password" @bind-Value="register.Password"></InputText>
                        <ValidationMessage For="(() => register.Password)"></ValidationMessage>
                    </div>

                    <div class="form-row mt-2">
                        <span for="confirmPassword" class="form-text pb-1">Confirm Password</span>
                        <InputText id="confirmPassword" class="form-control rounded-pill" type="password" @bind-Value="register.ConfirmPassword"></InputText>
                        <ValidationMessage For="(() => register.ConfirmPassword)"></ValidationMessage>
                    </div>
                </div>

                @switch (Status)
                {
                    case RegisterStatus.Idle:
                        <button type="submit" class="btn btn-outline-primary rounded-pill mt-4 py-3 w-100">Register</button>
                        break;
                    case RegisterStatus.OnRegistering:
                        <span class="disabled btn btn-outline-primary rounded-pill mt-4 py-3 w-100">Registering</span>
                        break;
                    case RegisterStatus.Success:
                        <button class="btn btn-success rounded-pill mt-4 py-3 w-100" @onclick="NavigateToHomePage">Successfully Registered</button>
                        break;
                    case RegisterStatus.Error:
                        <button type="submit" class="btn btn-outline-primary rounded-pill mt-4 py-3 w-100">Register</button>
                        <span class="d-block mt-2 text-danger text-center text-wrap">@Message</span>
                        break;
                    default:
                        break;
                }
            </EditForm>

        </div>
    </div>
</div>

@code {

    public RegisterData register = new RegisterData();

    public enum RegisterStatus
    {
        Idle,OnRegistering,Success,Error
    }

    public RegisterStatus Status { get; set; }
    public string Message { get; set; }


    async Task HandleRegistration()
    {
        Status = RegisterStatus.OnRegistering;

        var response = await AuthService.Register(register);

        if (response.IsSuccess)
        {
            Status = RegisterStatus.Success;
            NavigateToHomePage();
        }
        else
        {
            Status = RegisterStatus.Error;
            Message = response.Message;
        }
    }
    public void NavigateToHomePage()
    {
        NavigationService.NavigateTo("/");
    }
}
